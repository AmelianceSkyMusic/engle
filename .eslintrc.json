{
	"env": {
		"browser": true,
		"es2021": true
	},
	"extends": [
		"airbnb",
		"airbnb/hooks",
		"eslint:recommended",
		"plugin:react/recommended",
		"plugin:@typescript-eslint/recommended",
		"plugin:react/jsx-runtime"
	],
	"overrides": [
	],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaVersion": "latest",
		"sourceType": "module"
	},
	"plugins": [
		"react",
		"@typescript-eslint"
	],
	"rules": {
		"indent": [2, "tab"],
		"react/jsx-indent": [2, "tab", {
			"checkAttributes": false,
			"indentLogicalExpressions": true
		}],
		"react/jsx-indent-props": [2, "tab"],
		"no-tabs": 0,
		"linebreak-style": [ "error", "unix" ],
		"quotes": [ "error", "single" ],
		"semi": [ "error", "always" ],
		"no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
		"import/prefer-default-export": "off",
		"react/jsx-filename-extension": [2 , {
			"extensions": [".js", "jsx", ".ts", ".tsx"]
		}],
		"import/extensions": [
			"error",
			"ignorePackages",
			{
				"js": "never",
				"jsx": "never",
				"ts": "never",
				"tsx": "never"
			}
		],
		"react/require-default-props": ["off"],
		"no-restricted-syntax": [
			"error",
			{
					"selector": "FunctionExpression",
					"message": "Function expressions are not allowed."
			},
			{
					"selector": "CallExpression[callee.name='setTimeout'][arguments.length!=2]",
					"message": "setTimeout must always be invoked with two arguments."
			}
	],
	  // typescript rules
	  "@typescript-eslint/member-delimiter-style": "error",
	  "@typescript-eslint/type-annotation-spacing": "warn",
	  "space-infix-ops": "off",
	  "@typescript-eslint/space-infix-ops": "warn",
	  "no-shadow": "off",
	  "@typescript-eslint/no-shadow": ["error"],
	  "space-before-blocks": "off",
		 "@typescript-eslint/space-before-blocks": "warn",
	  "object-curly-spacing": "off",
		 "@typescript-eslint/object-curly-spacing": ["warn", "always"],
		 "@typescript-eslint/naming-convention": [ "warn",
		 { "selector": "interface", "format": ["PascalCase"], "custom": { "regex": "^I[A-Z]", "match": true } },
		 { "selector": "enum", "format": ["PascalCase"], "custom": { "regex": "^E[A-Z]", "match": true } },
		 { "selector": "typeLike", "format": ["PascalCase"], "custom": { "regex": "^T[A-Z]", "match": true } }
	  ]
	},
	
	"settings": {
		"import/resolver": {
			"typescript": {}
		}
	}
}
